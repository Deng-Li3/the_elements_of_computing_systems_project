// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execnnnnution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* Any not ALU or Registers are control units which have two duties:
    1. Instruction decoding
    2. Instruction execution
    3. Next instruction fetching (Flow control) */

    /* Instruction Decoding  */
    /* load signal to A Reg */
    Mux(a=true, b=instruction[5], sel=instruction[15], out=loadAReg);
    /* Input data to A Reg */
    Mux16(a=instruction, b=outALU, sel=instruction[15],  out=inAReg);
    /* A Reg */
    ARegister(in=inAReg, load=loadAReg, out=outAReg);
    /* A/M */
    Mux16(a=outAReg, b=inM, sel=instruction[12], out=inYALU);
    /* D Reg */
    And(a=instruction[4], b=instruction[15], out=loadDReg);
    DRegister(in=outALU, load=loadDReg, out=inXALU);

    /* Instruction Execution */
    /* ALU */
    ALU(x=inXALU, y=inYALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=zrOutALU, ng=ngOutALU);

    /* Flow control */
    /* Implementation of the jump logic*/
    Or(a=zrOutALU, b=ngOutALU, out=notPs);
    Not(in=notPs, out=ps);

    And3Way(a=instruction[15], b=ps, c=instruction[0], out=jgt);
    And3Way(a=instruction[15], b=zrOutALU, c=instruction[1], out=jeq);
    And3Way(a=instruction[15], b=ngOutALU, c=instruction[2], out=jlt);

    Or3Way(a=jgt, b=jeq, c=jlt, out=loadPC);
    /* Program Counter */
    PC(in=outAReg, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

    /* Out put of CPU Chip */
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);
    Mux16(a=false, b=outALU, sel=instruction[3], out=outM);
    Or16(a=false, b=outAReg, out[0..14]=addressM);
}
