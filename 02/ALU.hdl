// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:

    /* For x */
    Mux16(a=x, b[0..15]=false, sel=zx, out=x0);
    Not16(in=x0, out=nx0);
    Mux16(a=x0, b=nx0, sel=nx, out=x1);

    /* For y */
    Mux16(a=y, b[0..15]=false, sel=zy, out=y0);
    Not16(in=y0, out=ny0);
    Mux16(a=y0, b=ny0, sel=ny, out=y1);

    /* For control bit f */
    Add16(a=x1, b=y1, out=f0);
    And16(a=x1, b=y1, out=f1);
    Mux16(a=f1, b=f0, sel=f, out=r0);

    /* For control bit no */
    Not16(in=r0, out=nr0);
    Mux16(a=r0, b=nr0, sel=no, out=r1);

    /* For zr & ng */
    Or16Way(in=r1, out=nzr);
    Not(in=nzr, out=zr);
    And16(a=r1, b[0..15]=true, out[15]=ng);

    /** For the final output */
    And16(a[0..15]=true, b=r1, out=out);
}
